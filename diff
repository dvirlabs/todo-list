diff --git a/backend/Dockerfile b/backend/Dockerfile
index f1a5de6..09b389a 100644
--- a/backend/Dockerfile
+++ b/backend/Dockerfile
@@ -1,5 +1,7 @@
 FROM python:3.9
 
+RUN apt-get update && apt-get install -y iputils-ping && rm -rf /var/lib/apt/lists/*
+
 WORKDIR /app
 
 COPY . .
diff --git a/db-init/Dockerfile b/db-init/Dockerfile
new file mode 100644
index 0000000..99d2554
--- /dev/null
+++ b/db-init/Dockerfile
@@ -0,0 +1,5 @@
+FROM postgres
+
+COPY init.sql /docker-entrypoint-initdb.d
+
+RUN chmod 644 /docker-entrypoint-initdb.d/init.sql
\ No newline at end of file
diff --git a/db-init/init.sql b/db-init/init.sql
index 246dcfa..7fff34a 100644
--- a/db-init/init.sql
+++ b/db-init/init.sql
@@ -1,10 +1,16 @@
-CREATE DATABASE todo_list;
+DO $$
+BEGIN
+    IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'todo_list') THEN
+        CREATE DATABASE todo_list;
+    END IF;
+END
+$$;
 
-\c todo_list
+\connect todo_list
 
-CREATE TABLE tasks (
+CREATE TABLE IF NOT EXISTS tasks (
     id SERIAL PRIMARY KEY,
     task TEXT NOT NULL,
     status VARCHAR(12) NOT NULL CHECK (status IN ('todo', 'in progress', 'done')),
     notes TEXT
-);
\ No newline at end of file
+);
diff --git a/docker-copmose b/docker-copmose
new file mode 100644
index 0000000..44074cd
--- /dev/null
+++ b/docker-copmose
@@ -0,0 +1,36 @@
+version: "3.8"
+services:
+  frontend:
+    image: todo-list:front-v3
+    ports:
+      - "80:80"
+    environment:
+      REACT_APP_API_URL: http://localhost:8000
+    networks:
+      - todo_network
+  backend:
+    image: todo-list:back-v3
+    ports:
+      - "8000:8000"
+    depends_on:
+      - db
+    networks:
+      - todo_network
+  db:
+    image: postgres
+    ports:
+      - "5432:5432"
+    environment:
+      POSTGRES_USER: postgres
+      POSTGRES_PASSWORD: Aa123456
+      POSTGRES_DB: todo_list
+    volumes:
+      - ./db_data:/var/lib/postgresql/data
+      - ./db-init:/docker-entrypoint-initdb.d
+    restart: always
+    networks:
+      - todo_network
+
+networks:
+  todo_network:
+    driver: bridge
\ No newline at end of file
diff --git a/docker-copmose.yaml b/docker-copmose.yaml
deleted file mode 100644
index c281263..0000000
--- a/docker-copmose.yaml
+++ /dev/null
@@ -1,23 +0,0 @@
-version: "3.8"
-services:
-  frontend:
-    build: ./frontend
-    ports:
-      - "80:80"
-  backend:
-    build: ./backend
-    ports:
-      - "8000:8000"
-    depends_on:
-      - db
-  db:
-    image: postgres
-    ports:
-      - "5432:5432"
-    environment:
-      POSTGRES_USER: postgres
-      POSTGRES_PASSWORD: Aa123456
-      POSTGRES_DB: postgres
-    volumes:
-      - ./db-init:/docker-entrypoint-initdb.d
-    restart: always
\ No newline at end of file
diff --git a/frontend/Dockerfile b/frontend/Dockerfile
index 095ad66..c12fb2c 100644
--- a/frontend/Dockerfile
+++ b/frontend/Dockerfile
@@ -2,8 +2,8 @@ FROM node:20.11.1 AS build
 
 WORKDIR /app
 
-COPY package.json ./
-COPY package-lock.json ./
+COPY package.json ./ 
+COPY package-lock.json ./ 
 
 RUN npm install
 
@@ -11,10 +11,17 @@ COPY . .
 
 RUN npm run build
 
+# Second stage: nginx image
 FROM nginx:1.26.2
 
+# Install ping tool in the nginx container
+# RUN apt-get update && apt-get install -y iputils-ping
+
+# Copy the built frontend app into the nginx container
 COPY --from=build /app/build /usr/share/nginx/html
 
+# Expose port 3000 (for development purposes)
 EXPOSE 3000
 
-CMD ["nginx", "-g", "daemon off;"]
\ No newline at end of file
+# Start nginx
+CMD ["nginx", "-g", "daemon off;"]
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index 84ee2f9..1476508 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -15,7 +15,6 @@
         "@testing-library/jest-dom": "^5.17.0",
         "@testing-library/react": "^13.4.0",
         "@testing-library/user-event": "^13.5.0",
-        "events": "^3.3.0",
         "react": "^18.3.1",
         "react-dom": "^18.3.1",
         "react-scripts": "5.0.1",
diff --git a/frontend/package.json b/frontend/package.json
index 3c2d68f..af7ec9a 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -10,7 +10,6 @@
     "@testing-library/jest-dom": "^5.17.0",
     "@testing-library/react": "^13.4.0",
     "@testing-library/user-event": "^13.5.0",
-    "events": "^3.3.0",
     "react": "^18.3.1",
     "react-dom": "^18.3.1",
     "react-scripts": "5.0.1",
diff --git a/frontend/src/components/EventEmitter.jsx b/frontend/src/components/EventEmitter.jsx
deleted file mode 100644
index 428a2ab..0000000
--- a/frontend/src/components/EventEmitter.jsx
+++ /dev/null
@@ -1,5 +0,0 @@
-import { EventEmitter } from 'events';
-
-const eventEmitter = new EventEmitter();
-
-export default eventEmitter;
diff --git a/frontend/src/components/InsertNewTask.jsx b/frontend/src/components/InsertNewTask.jsx
index efa81f7..0b16958 100644
--- a/frontend/src/components/InsertNewTask.jsx
+++ b/frontend/src/components/InsertNewTask.jsx
@@ -3,7 +3,6 @@ import '../style/InsertNewTask.css';
 import { createTask } from "../services/tasksTableService";
 import { Button, Select, MenuItem } from '@mui/material';
 import { toast } from 'react-toastify';
-import eventEmitter from "./EventEmitter";
 
 
 
@@ -41,9 +40,6 @@ const InsertNewTask = () => {
                         status: '',
                         notes: ''
                     });
-
-                    eventEmitter.emit('taskAdded', { taskName: task.task });
-                    console.log('Task added event emitted:', task.task);
                 } else {
                     toast.error("המשימה לא נוספה בהצלחה");
                 }
diff --git a/frontend/src/components/TodoListTable.jsx b/frontend/src/components/TodoListTable.jsx
index 399505d..66077ae 100644
--- a/frontend/src/components/TodoListTable.jsx
+++ b/frontend/src/components/TodoListTable.jsx
@@ -4,7 +4,6 @@ import { Delete, Edit, Undo } from "@mui/icons-material";
 import { Dialog, DialogActions, DialogContent, DialogTitle, Button, TextField, Select, MenuItem } from "@mui/material";
 import { toast } from 'react-toastify';
 import '../style/TodoListTable.css';
-import eventEmitter from "./EventEmitter";
 
 const TodoListTable = () => {
     const [data, setData] = useState([]);
@@ -28,25 +27,6 @@ const TodoListTable = () => {
                 setError(error);
                 setIsLoading(false);
             });
-
-                    // Listen for taskAdded event to refetch tasks
-        const handleTaskAdded = () => {
-            console.log('taskAdded event received');
-            getTasks()
-                .then((data) => {
-                    console.log('Fetched tasks after taskAdded event:', data);
-                    setData(data);
-                })
-                .catch((error) => {
-                    setError(error);
-                });
-        };
-
-        eventEmitter.on('taskAdded', handleTaskAdded);
-
-        return () => {
-            eventEmitter.removeListener('taskAdded', handleTaskAdded);
-        };
     }, []);
 
     const handleDelete = (taskId) => {
diff --git a/frontend/src/services/tasksTableService.js b/frontend/src/services/tasksTableService.js
index 4622642..29c455e 100644
--- a/frontend/src/services/tasksTableService.js
+++ b/frontend/src/services/tasksTableService.js
@@ -96,5 +96,4 @@ export const undoDeleteTask = async (taskId) => {
         console.error('Error:', error);
         throw error;
     }
-};
-
+};
\ No newline at end of file
